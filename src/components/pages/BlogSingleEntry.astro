---
import { documentToHtmlString, type Options } from '@contentful/rich-text-html-renderer';
import { BLOCKS, INLINES, MARKS, type Document } from '@contentful/rich-text-types';
import BackButton from "@components/BackButton/BackButton.astro";
import BlogLayout from '@layouts/BlogLayout.astro';
import { cn } from '@lib/tailwind';

interface Props {
  title: string;
  body: Document;
  coverImageUrl?: string;
}

const { title, body, coverImageUrl } = Astro.props;

const options: Options = {
  renderNode: {
    [BLOCKS.PARAGRAPH]: (node, next) =>
      `<p class="mb-4">${next(node.content)}</p>`,
    [BLOCKS.HEADING_2]: (node, next) =>
      `<h2 class="text-lg">${next(node.content)}</h2>`,
    [BLOCKS.EMBEDDED_ASSET]: (node) => {
      const { title, description, file } = node.data.target.fields;
      return `
        <a
          href="${node.data.target.fields.file.url}"
          class="my-8 block"
          target="_blank"
          rel="noopener noreferrer"
        >
          <figure class="flex flex-col items-center gap-2">
            <img
              class="w-full max-w-[80%] bg-brandGray-200 dark:bg-brandGray-700 rounded-sm lazy-image [&[data-src]]:blur-md"
              width="${file.details.image.width}"
              height="${file.details.image.height}"
              src=""
              data-src="${file.url}"
              alt="${title}"
            />
            ${title || description ? `<figcaption class="text-center w-full max-w-[80%] flex flex-col gap-1">
              ${title ? `<span class="text-sm">${title}</span>` : ''}
              ${description ? `<span class="text-xs">${description}</span>` : ''}
            </figcaption>` : ''}
          </figure>
        </a>`;
    },
    [INLINES.HYPERLINK]: (node, next) =>
      `<a href="${node.data.uri}" class="text-primary hover:underline">${next(node.content)}</a>`,
  },
  renderMark: {
    [MARKS.CODE]: (text) => {
      const regex = /^lang:(\w+)/m;
      const match = text.match(regex);

      if (!match) {
        return `<code>${text}</code>`;
      }

      const language = match[1];
      let code = text.replace(regex, '').trim();

      return `<pre><code class="language-${language}">${code}</code></pre>`;
    },
  },
};

const bodyHtmlContent = documentToHtmlString(body, options);
---
<BlogLayout title={title}>
  <BackButton />
  {coverImageUrl && (
    <div class={cn(
      "relative -mb-[25vh] max-h-[50vh] w-full overflow-hidden",
      "after:h-64 after:absolute after:left-0 after:bottom-0 after:right-0 after:-mt-64 after:block after:content-[''] after:bg-gradient-to-b",
      "after:from-transparent after:to-brandGray-50",
      "after:dark:from-transparent after:dark:to-brandGray-800",
      "after:w-[calc(100%_+_256px)] after:-mx-32"
    )}>
      <img src={coverImageUrl} alt={title} class="w-[calc(100%_+_256px)] -mx-32 max-w-none block z-0" />
    </div>
  )}
  <div class="relative container mt-2 mb-0 flex flex-col">
    <h2 class="text-6xl text-white text-backdrop mx-6 mt-2 mb-4">{title}</h2>
    <div class="blog-content shadow-lg bg-brandGray-50 bg-opacity-90 dark:bg-brandGray-800 dark:bg-opacity-90 backdrop-blur-sm z-10 mb-0 px-8 pt-6 pb-12" set:html={bodyHtmlContent} />
  </div>
</BlogLayout>
<script is:inline>
  window.Prism = window.Prism || {};
  Prism.manual = true;
  document.addEventListener('astro:page-load', () => Prism.highlightAll());
</script>
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/9000.0.1/prism.min.js" data-manual />
<script src="@/scripts/lazy-load-images.ts"></script>